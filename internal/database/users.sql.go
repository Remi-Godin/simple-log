// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const getUserInfo = `-- name: GetUserInfo :one
SELECT
FirstName,
LastName,
Email
FROM
users
WHERE
userid = $1
`

type GetUserInfoRow struct {
	Firstname string
	Lastname  string
	Email     string
}

func (q *Queries) GetUserInfo(ctx context.Context, userid int32) (GetUserInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getUserInfo, userid)
	var i GetUserInfoRow
	err := row.Scan(&i.Firstname, &i.Lastname, &i.Email)
	return i, err
}

const getUserInfoFromEmail = `-- name: GetUserInfoFromEmail :one
SELECT
FIrstName,
LastName
FROM
users
WHERE
Email = $1
`

type GetUserInfoFromEmailRow struct {
	Firstname string
	Lastname  string
}

func (q *Queries) GetUserInfoFromEmail(ctx context.Context, email string) (GetUserInfoFromEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserInfoFromEmail, email)
	var i GetUserInfoFromEmailRow
	err := row.Scan(&i.Firstname, &i.Lastname)
	return i, err
}

const getUserPasswordHash = `-- name: GetUserPasswordHash :one
SELECT
Email,
PasswordHash
FROM
users
WHERE
userid = $1
`

type GetUserPasswordHashRow struct {
	Email        string
	Passwordhash string
}

func (q *Queries) GetUserPasswordHash(ctx context.Context, userid int32) (GetUserPasswordHashRow, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordHash, userid)
	var i GetUserPasswordHashRow
	err := row.Scan(&i.Email, &i.Passwordhash)
	return i, err
}

const insertNewUser = `-- name: InsertNewUser :execresult
INSERT INTO users(FirstName,LastName,Email,PasswordHash) VALUES
($1,$2,$3,$4)
`

type InsertNewUserParams struct {
	Firstname    string
	Lastname     string
	Email        string
	Passwordhash string
}

func (q *Queries) InsertNewUser(ctx context.Context, arg InsertNewUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertNewUser,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Passwordhash,
	)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: logbooks.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const deleteLogbook = `-- name: DeleteLogbook :execresult
DELETE FROM logbooks WHERE LogbookId=$1
`

func (q *Queries) DeleteLogbook(ctx context.Context, logbookid int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteLogbook, logbookid)
}

const getLogbookData = `-- name: GetLogbookData :one
SELECT
LogbookId,
Title,
Description,
OwnedBy
FROM logbooks
WHERE LogbookId = $1
`

type GetLogbookDataRow struct {
	Logbookid   int32
	Title       string
	Description string
	Ownedby     string
}

func (q *Queries) GetLogbookData(ctx context.Context, logbookid int32) (GetLogbookDataRow, error) {
	row := q.db.QueryRowContext(ctx, getLogbookData, logbookid)
	var i GetLogbookDataRow
	err := row.Scan(
		&i.Logbookid,
		&i.Title,
		&i.Description,
		&i.Ownedby,
	)
	return i, err
}

const getLogbooks = `-- name: GetLogbooks :many
SELECT
LogbookId,
Title,
OwnedBy
FROM logbooks
LIMIT $1
OFFSET $2
`

type GetLogbooksParams struct {
	Limit  int32
	Offset int32
}

type GetLogbooksRow struct {
	Logbookid int32
	Title     string
	Ownedby   string
}

func (q *Queries) GetLogbooks(ctx context.Context, arg GetLogbooksParams) ([]GetLogbooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getLogbooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLogbooksRow
	for rows.Next() {
		var i GetLogbooksRow
		if err := rows.Scan(&i.Logbookid, &i.Title, &i.Ownedby); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogbooksOwnedBy = `-- name: GetLogbooksOwnedBy :many
SELECT 
l.LogbookId,
l.Title,
l.Description,
l.CreatedOn ,
u.FirstName,
u.LastName,
u.Email
FROM logbooks l
INNER JOIN users u 
ON l.OwnedBy = u.Email
WHERE l.OwnedBy=$1
ORDER BY CreatedOn DESC
LIMIT $2
OFFSET $3
`

type GetLogbooksOwnedByParams struct {
	Ownedby string
	Limit   int32
	Offset  int32
}

type GetLogbooksOwnedByRow struct {
	Logbookid   int32
	Title       string
	Description string
	Createdon   time.Time
	Firstname   string
	Lastname    string
	Email       string
}

func (q *Queries) GetLogbooksOwnedBy(ctx context.Context, arg GetLogbooksOwnedByParams) ([]GetLogbooksOwnedByRow, error) {
	rows, err := q.db.QueryContext(ctx, getLogbooksOwnedBy, arg.Ownedby, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLogbooksOwnedByRow
	for rows.Next() {
		var i GetLogbooksOwnedByRow
		if err := rows.Scan(
			&i.Logbookid,
			&i.Title,
			&i.Description,
			&i.Createdon,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNewLogbook = `-- name: InsertNewLogbook :execresult
INSERT INTO logbooks(Title,Description,OwnedBy) VALUES
($1,$2,$3)
`

type InsertNewLogbookParams struct {
	Title       string
	Description string
	Ownedby     string
}

func (q *Queries) InsertNewLogbook(ctx context.Context, arg InsertNewLogbookParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertNewLogbook, arg.Title, arg.Description, arg.Ownedby)
}

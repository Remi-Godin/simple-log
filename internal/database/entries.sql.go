// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entries.sql

package database

import (
	"context"
)

const getAllEntriesFromLogbook = `-- name: GetAllEntriesFromLogbook :many
SELECT 
entries.EntryId,
entries.Title,
entries.Description,
entries.CreatedOn,
entries.CreatedBy 
FROM entries 
NATURAL JOIN belongs_to 
WHERE belongs_to.LogbookId=$1
`

func (q *Queries) GetAllEntriesFromLogbook(ctx context.Context, logbookid int32) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getAllEntriesFromLogbook, logbookid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.Entryid,
			&i.Title,
			&i.Description,
			&i.Createdon,
			&i.Createdby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryFromLogbook = `-- name: GetEntryFromLogbook :one
SELECT 
entries.EntryId,
entries.Title,
entries.Description,
entries.CreatedOn,
entries.CreatedBy 
FROM entries 
NATURAL JOIN belongs_to
WHERE belongs_to.LogbookId=$1 AND entries.EntryId=$2
`

type GetEntryFromLogbookParams struct {
	Logbookid int32
	Entryid   int32
}

func (q *Queries) GetEntryFromLogbook(ctx context.Context, arg GetEntryFromLogbookParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryFromLogbook, arg.Logbookid, arg.Entryid)
	var i Entry
	err := row.Scan(
		&i.Entryid,
		&i.Title,
		&i.Description,
		&i.Createdon,
		&i.Createdby,
	)
	return i, err
}

const getLastNEntriesFromLogbook = `-- name: GetLastNEntriesFromLogbook :many
SELECT 
entries.EntryId,
entries.Title,
entries.Description,
entries.CreatedOn,
entries.CreatedBy 
FROM entries 
NATURAL JOIN belongs_to 
WHERE belongs_to.LogbookId=$1 
ORDER BY entries.CreatedOn 
LIMIT $2 
OFFSET $3
`

type GetLastNEntriesFromLogbookParams struct {
	Logbookid int32
	Limit     int32
	Offset    int32
}

func (q *Queries) GetLastNEntriesFromLogbook(ctx context.Context, arg GetLastNEntriesFromLogbookParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getLastNEntriesFromLogbook, arg.Logbookid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.Entryid,
			&i.Title,
			&i.Description,
			&i.Createdon,
			&i.Createdby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
